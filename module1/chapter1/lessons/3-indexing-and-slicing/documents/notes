Summary of Class -

python
a vs 'a' 
a is variable 
'a' is string

    () : Small bracket is used for functions | Ex : print() 
    [] : Curly bracket is used for indexing & Slicing | Ex : _var[3]


### Indexing

Accessing Elements:

- **Zero-based Positive Indexing**: The first element is at index `0`, the second at index `1`, and so on.
- **Negative Indexing**: Allows accessing elements from the end of the sequence. -`1` refers to the last element, -`2` to the second last, etc.

```python

my_list = [10, 20, 30, 40, 50]
print(my_list[0])  # Output: 10
print(my_list[-1]) # Output: 50

```



### Slicing

1.) **Basic Slicing**:
    - Syntax: `sequence[start:stop]` [i : j]
    - i : Start: Index to begin the slice (inclusive). ( Index of the first element of the slice)
    - j : Stop: Index to end the slice (exclusive). (Index of the last element of the slice + 1)
    

    my_list = [10, 20, 30, 40, 50]
    print(my_list[1:4])  # Output: [20, 30, 40]
    

    
2.) **Optional Parameters**:
    - **start** can be omitted to start from the beginning.
    - **stop** can be omitted to go until the end.
 
    
    print(my_list[:3])   # Output: [10, 20, 30]
    print(my_list[2:])   # Output: [30, 40, 50]
    
    

1.) **Step Parameter**:
- **Syntax**: `sequence[start:stop:step]`
- **Step**: Number of elements to skip.


my_list = [10, 20, 30, 40, 50]
print(my_list[0:5:2])  # Output: [10, 30, 50]
print(my_list[1:5:3])  # Output: [20, 50]


### **Nested List**

### Example of Indexing in Nested Lists

nested_list = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

# Accessing the first sublist
first_sublist = nested_list[0]
print(first_sublist)  # Output: [1, 2, 3]

# Accessing the element '5' in the second sublist
element_5 = nested_list[1][1]
print(element_5)  # Output: 5

# Accessing the last element of the last sublist
last_element = nested_list[-1][-1]
print(last_element)  # Output: 9


### Example of Slicing in Nested Lists


nested_list = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [10, 11, 12]
]

# Slicing to get the first two sublists
first_two_sublists = nested_list[:2]
print(first_two_sublists)  # Output: [[1, 2, 3], [4, 5, 6]]

# Slicing to get the last two elements of the second sublist
last_two_elements_second_sublist = nested_list[1][1:]
print(last_two_elements_second_sublist)  # Output: [5, 6]

# Slicing to get every second sublist
every_second_sublist = nested_list[::2]
print(every_second_sublist)  # Output: [[1, 2, 3], [7, 8, 9]]


### Accessing Elements in Dictionaries

**Accessing Values by Keys**:


my_dict = {'a': 1, 'b': 2, 'c': 3}

# Accessing value associated with key 'a'
value_a = my_dict['a']
print(value_a)  # Output: 1
```

### **Reverse Slicing**

Reverse slicing in Python allows you to access elements from a sequence (like a list, string, or tuple) in reverse order. It leverages the slicing syntax `start:stop:step`, where `step` is set to `-1` to reverse the sequence.

### Basic Syntax

```python

sequence[start:stop:step]

```

- `start`: The starting index of the slice.
- `stop`: The index where the slice stops (not included). (index of last element of the slice - 1)
- `step`: The step value, which determines the stride. Setting it to `1` reverses the sequence.

### Example 1: Reversing a List

```python

my_list = [1, 2, 3, 4, 5]
reversed_list = my_list[::-1]
print(reversed_list)  # Output: [5, 4, 3, 2, 1]

```

### Example 2: Reversing a String

```python

my_string = "Hello, World!"
reversed_string = my_string[::-1]
print(reversed_string)  # Output: "!dlroW ,olleH"

```

### Example 3: Reverse Slicing with Start and Stop

You can also reverse slice a specific portion of a sequence.

```python
my_list = [10, 20, 30, 40, 50, 60, 70]
reversed_portion = my_list[5:1:-1]
print(reversed_portion)  # Output: [60, 50, 40, 30]

```

Here, the slice starts at index `5` (element `60`) and stops before index `1` (element `20`), stepping backwards.

### Key Points

- Reverse slicing with `[::-1]` gives a reversed copy of the sequence.
- The `start` and `stop` indices can be used to reverse specific portions.
- It’s a handy feature to manipulate and access data in reverse order without modifying the original sequence.


### Updating Data with  Slicing

Updating data using slicing in Python allows you to modify specific portions of a list or other mutable sequences directly. Here’s how you can do it:


### Example 1: Replacing Elements in a List

You can replace a portion of a list with new elements using slicing.

my_list = [1, 2, 3, 4, 5]
my_list[1:4] = [20, 30, 40]  # Replaces elements at index 1, 2, 3
print(my_list)  # Output: [1, 20, 30, 40, 5]


### Example 2: Inserting New Elements

You can also insert new elements by assigning a slice with a different size.


my_list = [1, 2, 3, 4, 5]
my_list[2:4] = [99, 100, 101]  # Inserts additional elements at index 2
print(my_list)  # Output: [1, 2, 99, 100, 101, 5]


### Updating Data with Reverse Slicing

### Example 1: Reversing and Updating a Portion of a List

Reverse slicing allows you to replace a portion of the list in reverse order.

my_list = [10, 20, 30, 40, 50]
my_list[4:1:-1] = [500, 400, 300]  # Replaces elements from index 4 to 2 in reverse
print(my_list)  # Output: [10, 500, 400, 300, 20]


### Example 2: Inserting Reversed Elements

You can insert elements in reverse order using reverse slicing.

my_list = [100, 200, 300, 400]
my_list[3:1:-1] = [999, 888, 777]  # Inserts elements in reverse order
print(my_list)  # Output: [100, 200, 999, 888, 777]


### Key Points:

- **Forward Slicing:** Used for modifying specific portions of a sequence in their natural order.
- **Reverse Slicing:** Allows for modifying or inserting elements in reverse order.
- **Mutable Sequences:** Slicing can be used to update lists, but not immutable sequences like strings and tuples.